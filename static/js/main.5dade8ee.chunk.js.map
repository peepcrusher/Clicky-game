{"version":3,"sources":["components/title.js","components/card.js","data/data.js","components/jumbotron.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","Card","props","console","log","data","map","character","onClick","handleScore","name","src","alt","characters","Jumbotron","Score","state","score","topScore","_this","includes","setState","alert","newCharacters","concat","shuffle","Data","array","newArr","i","length","ranNum","Math","floor","random","temp","this","jumbotron","card","React","Component","App","title","Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dade8ee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Nav() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-dark\">\r\n        <h1 className=\"navbar-brand text-light mx-auto\"> Clicky Game</h1>\r\n      </nav>\r\n    );\r\n  }\r\n\r\n  export default Nav;","import React from 'react';\r\n\r\n\r\nfunction Card(props) {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"row\">\r\n            {props.data.map(character => (\r\n                <div className=\"card col-3\">\r\n                \r\n                    <img onClick={() => props.handleScore(character.name)} name={character.name} src={character.src} className=\"card-img-top\" alt={character.name} />\r\n                </div>\r\n            ))}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","const characters = [{\r\n        name: \"Tina Belcher\",\r\n        src: \"https://i.imgur.com/wS9Sg2C.png\"\r\n    },\r\n    {\r\n        name: \"Spongebob\",\r\n        src: \"https://i.imgur.com/Ij9ef5s.jpg\"\r\n    },\r\n    {\r\n        name: \"Dexter\",\r\n        src: \"https://i.imgur.com/Py9HxeX.jpg\"\r\n    },\r\n    {\r\n        name: \"Power Puff Girls\",\r\n        src: \"https://i.imgur.com/kJp3GuN.jpg\"\r\n    },\r\n    {\r\n        name: \"Ed\",\r\n        src: \"https://i.imgur.com/hL0uXqN.jpg?1\"\r\n    },\r\n    {\r\n        name: \"Courage\",\r\n        src: \"https://i.imgur.com/gIetVdY.jpg\"\r\n    },\r\n    {\r\n        name: \"Danny Phantom\",\r\n        src: \"https://i.imgur.com/0pH65uk.jpg\"\r\n    },\r\n    {\r\n        name: \"Rugrats\",\r\n        src: \"https://i.imgur.com/m1pBFpT.jpg\"\r\n    },\r\n    {\r\n        name: \"Cat-Dog\",\r\n        src: \"https://i.imgur.com/EtWGTVs.png\"\r\n    },\r\n    {\r\n        name: \"Timmy Turner\",\r\n        src: \"https://i.imgur.com/us5fOfG.jpg\"\r\n    },\r\n    {\r\n        name: \"Hey Arnold\",\r\n        src: \"https://i.imgur.com/KLBifrA.png\"\r\n    },\r\n    {\r\n        name: \"Cow and Chicken\",\r\n        src: \"https://i.imgur.com/0LC6zUf.jpg\"\r\n    }\r\n]\r\n\r\nexport default characters;","import React from 'react'\r\n\r\nfunction Jumbotron() {\r\n    return(\r\n    <div className=\"jumbotron\">\r\n    <h1 className=\"display-4\">Instructions!</h1>\r\n    <p className=\"lead\">Try to click all 12 cartoons! but don't click the same one twice!</p>\r\n  </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Jumbotron","import React from 'react';\r\nimport Card from './card'\r\nimport Data from '../data/data'\r\nimport Jumbotron from './jumbotron'\r\n\r\nclass Score extends React.Component {\r\n\r\n    state = {\r\n        score: 0,\r\n        topScore: 0,\r\n        characters: []\r\n    }\r\n\r\n\r\n    handleScore = name => {\r\n        console.log(this.state)\r\n        if (this.state.characters.includes(name)) {\r\n            this.setState({ score: 0 })\r\n            this.setState({ characters: [] })\r\n            alert(\"You Lose\")\r\n        }\r\n\r\n        else {\r\n\r\n            this.setState({ score: this.state.score + 1 })\r\n            var newCharacters = this.state.characters.concat(name);\r\n            this.setState({ characters: newCharacters })\r\n\r\n            if (this.state.score >= this.state.topScore) {\r\n                this.setState({ topScore: this.state.score + 1 })\r\n            }\r\n        }\r\n        this.shuffle(Data)\r\n    }\r\n\r\n    shuffle = array => {\r\n\r\n        var newArr = array;\r\n\r\n        for (let i = 0; i < newArr.length; i++) {\r\n            let ranNum = Math.floor(Math.random() * newArr.length)\r\n\r\n            let temp = newArr[ranNum]\r\n            newArr[ranNum] = newArr[i];\r\n            newArr[i] = temp;\r\n        }\r\n        console.log(newArr);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar sticky-top navbar-primary bg-light\">\r\n                    <h3 className=\"navbar-brand float-right\">Top Score:{this.state.topScore}</h3>\r\n                    <h3 className=\"navbar-brand float-right\">Score:{this.state.score}</h3>\r\n                </nav>\r\n                <Jumbotron />\r\n                <div className=\"container\">\r\n                    <Card\r\n                        handleScore={this.handleScore}\r\n                        data={Data}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Score;","import React from 'react';\nimport './App.css';\nimport Nav from './components/title'\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}